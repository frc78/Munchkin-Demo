package frc.robot.generated

import com.ctre.phoenix6.CANBus
import com.ctre.phoenix6.configs.CANcoderConfiguration
import com.ctre.phoenix6.configs.CurrentLimitsConfigs
import com.ctre.phoenix6.configs.Pigeon2Configuration
import com.ctre.phoenix6.configs.Slot0Configs
import com.ctre.phoenix6.configs.TalonFXConfiguration
import com.ctre.phoenix6.hardware.CANcoder
import com.ctre.phoenix6.hardware.TalonFX
import com.ctre.phoenix6.signals.StaticFeedforwardSignValue
import com.ctre.phoenix6.swerve.SwerveDrivetrain
import com.ctre.phoenix6.swerve.SwerveDrivetrainConstants
import com.ctre.phoenix6.swerve.SwerveModuleConstants
import com.ctre.phoenix6.swerve.SwerveModuleConstants.DriveMotorArrangement
import com.ctre.phoenix6.swerve.SwerveModuleConstants.SteerMotorArrangement
import com.ctre.phoenix6.swerve.SwerveModuleConstantsFactory
import edu.wpi.first.units.Units.Amps
import edu.wpi.first.units.Units.Inches
import edu.wpi.first.units.Units.KilogramSquareMeters
import edu.wpi.first.units.Units.MetersPerSecond
import edu.wpi.first.units.Units.Rotations
import edu.wpi.first.units.Units.Volts

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
object TunerConstants {
    // Both sets of gains need to be tuned to your individual robot.
    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
    private val steerGains =
        Slot0Configs()
            .withKP(100.0)
            .withKI(0.0)
            .withKD(0.5)
            .withKS(0.1)
            .withKV(1.91)
            .withKA(0.0)
            .withStaticFeedforwardSign(StaticFeedforwardSignValue.UseClosedLoopSign)

    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
    private val driveGains =
        Slot0Configs().withKP(0.1).withKI(0.0).withKD(0.0).withKS(0.0).withKV(0.124)

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    private val kSteerClosedLoopOutput = SwerveModuleConstants.ClosedLoopOutputType.Voltage

    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    private val kDriveClosedLoopOutput = SwerveModuleConstants.ClosedLoopOutputType.Voltage

    // The type of motor used for the drive motor
    private val kDriveMotorType = DriveMotorArrangement.TalonFX_Integrated

    // The type of motor used for the drive motor
    private val kSteerMotorType = SteerMotorArrangement.TalonFX_Integrated

    // The remote sensor feedback type to use for the steer motors;
    // When not Pro-licensed, Fused*/Sync* automatically fall back to Remote*
    private val kSteerFeedbackType = SwerveModuleConstants.SteerFeedbackType.FusedCANcoder

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    private val kSlipCurrent = Amps.of(120.0)

    // Initial configs for the drive and steer motors and the azimuth encoder; these cannot be null.
    // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
    private val driveInitialConfigs = TalonFXConfiguration()
    private val steerInitialConfigs =
        TalonFXConfiguration()
            .withCurrentLimits(
                CurrentLimitsConfigs() // Swerve azimuth does not require much torque output, so we
                    // can set a relatively low
                    // stator current limit to help avoid brownouts without impacting performance.
                    .withStatorCurrentLimit(Amps.of(60.0))
                    .withStatorCurrentLimitEnable(true)
            )
    private val encoderInitialConfigs = CANcoderConfiguration()

    // Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
    private val pigeonConfigs: Pigeon2Configuration? = null

    // CAN bus that the devices are located on;
    // All swerve devices must share the same CAN bus
    val kCANBus = CANBus("rio", "./logs/example.hoot")

    // Theoretical free speed (m/s) at 12 V applied output;
    // This needs to be tuned to your individual robot
    val kSpeedAt12Volts = MetersPerSecond.of(4.54)

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    private const val kCoupleRatio = 3.5714285714285716

    private const val kDriveGearRatio = 6.122448979591837
    private const val kSteerGearRatio = 21.428571428571427
    private val kWheelRadius = Inches.of(2.0)

    private const val kInvertLeftSide = false
    private const val kInvertRightSide = true

    private const val kPigeonId = 1

    // These are only used for simulation
    private val kSteerInertia = KilogramSquareMeters.of(0.01)
    private val kDriveInertia = KilogramSquareMeters.of(0.01)

    // Simulated voltage necessary to overcome friction
    private val kSteerFrictionVoltage = Volts.of(0.2)
    private val kDriveFrictionVoltage = Volts.of(0.2)

    val DrivetrainConstants =
        SwerveDrivetrainConstants()
            .withCANBusName(kCANBus.getName())
            .withPigeon2Id(kPigeonId)
            .withPigeon2Configs(pigeonConfigs)

    private val ConstantCreator:
        SwerveModuleConstantsFactory<
            TalonFXConfiguration,
            TalonFXConfiguration,
            CANcoderConfiguration,
        > =
        SwerveModuleConstantsFactory<
                TalonFXConfiguration,
                TalonFXConfiguration,
                CANcoderConfiguration,
            >()
            .withDriveMotorGearRatio(kDriveGearRatio)
            .withSteerMotorGearRatio(kSteerGearRatio)
            .withCouplingGearRatio(kCoupleRatio)
            .withWheelRadius(kWheelRadius)
            .withSteerMotorGains(steerGains)
            .withDriveMotorGains(driveGains)
            .withSteerMotorClosedLoopOutput(kSteerClosedLoopOutput)
            .withDriveMotorClosedLoopOutput(kDriveClosedLoopOutput)
            .withSlipCurrent(kSlipCurrent)
            .withSpeedAt12Volts(kSpeedAt12Volts)
            .withDriveMotorType(kDriveMotorType)
            .withSteerMotorType(kSteerMotorType)
            .withFeedbackSource(kSteerFeedbackType)
            .withDriveMotorInitialConfigs(driveInitialConfigs)
            .withSteerMotorInitialConfigs(steerInitialConfigs)
            .withEncoderInitialConfigs(encoderInitialConfigs)
            .withSteerInertia(kSteerInertia)
            .withDriveInertia(kDriveInertia)
            .withSteerFrictionVoltage(kSteerFrictionVoltage)
            .withDriveFrictionVoltage(kDriveFrictionVoltage)

    // Front Left
    private const val kFrontLeftDriveMotorId = 1
    private const val kFrontLeftSteerMotorId = 2
    private const val kFrontLeftEncoderId = 1
    private val kFrontLeftEncoderOffset = Rotations.of(0.15234375)
    private const val kFrontLeftSteerMotorInverted = true
    private const val kFrontLeftEncoderInverted = false

    private val kFrontLeftXPos = Inches.of(10.0)
    private val kFrontLeftYPos = Inches.of(10.0)

    // Front Right
    private const val kFrontRightDriveMotorId = 3
    private const val kFrontRightSteerMotorId = 4
    private const val kFrontRightEncoderId = 2
    private val kFrontRightEncoderOffset = Rotations.of(-0.4873046875)
    private const val kFrontRightSteerMotorInverted = true
    private const val kFrontRightEncoderInverted = false

    private val kFrontRightXPos = Inches.of(10.0)
    private val kFrontRightYPos = Inches.of(-10.0)

    // Back Left
    private const val kBackLeftDriveMotorId = 5
    private const val kBackLeftSteerMotorId = 6
    private const val kBackLeftEncoderId = 3
    private val kBackLeftEncoderOffset = Rotations.of(-0.219482421875)
    private const val kBackLeftSteerMotorInverted = true
    private const val kBackLeftEncoderInverted = false

    private val kBackLeftXPos = Inches.of(-10.0)
    private val kBackLeftYPos = Inches.of(10.0)

    // Back Right
    private const val kBackRightDriveMotorId = 7
    private const val kBackRightSteerMotorId = 8
    private const val kBackRightEncoderId = 4
    private val kBackRightEncoderOffset = Rotations.of(0.17236328125)
    private const val kBackRightSteerMotorInverted = true
    private const val kBackRightEncoderInverted = false

    private val kBackRightXPos = Inches.of(-10.0)
    private val kBackRightYPos = Inches.of(-10.0)

    val FrontLeft:
        SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreator.createModuleConstants(
            kFrontLeftSteerMotorId,
            kFrontLeftDriveMotorId,
            kFrontLeftEncoderId,
            kFrontLeftEncoderOffset,
            kFrontLeftXPos,
            kFrontLeftYPos,
            kInvertLeftSide,
            kFrontLeftSteerMotorInverted,
            kFrontLeftEncoderInverted,
        )
    val FrontRight:
        SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreator.createModuleConstants(
            kFrontRightSteerMotorId,
            kFrontRightDriveMotorId,
            kFrontRightEncoderId,
            kFrontRightEncoderOffset,
            kFrontRightXPos,
            kFrontRightYPos,
            kInvertRightSide,
            kFrontRightSteerMotorInverted,
            kFrontRightEncoderInverted,
        )
    val BackLeft:
        SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreator.createModuleConstants(
            kBackLeftSteerMotorId,
            kBackLeftDriveMotorId,
            kBackLeftEncoderId,
            kBackLeftEncoderOffset,
            kBackLeftXPos,
            kBackLeftYPos,
            kInvertLeftSide,
            kBackLeftSteerMotorInverted,
            kBackLeftEncoderInverted,
        )
    val BackRight:
        SwerveModuleConstants<TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration> =
        ConstantCreator.createModuleConstants(
            kBackRightSteerMotorId,
            kBackRightDriveMotorId,
            kBackRightEncoderId,
            kBackRightEncoderOffset,
            kBackRightXPos,
            kBackRightYPos,
            kInvertRightSide,
            kBackRightSteerMotorInverted,
            kBackRightEncoderInverted,
        )

    /**
     * Swerve Drive class utilizing CTR Electronics' Phoenix 6 API with the selected device types.
     */
    open class TunerSwerveDrivetrain() :
        SwerveDrivetrain<TalonFX, TalonFX, CANcoder>(
            ::TalonFX,
            ::TalonFX,
            ::CANcoder,
            DrivetrainConstants,
            FrontLeft,
            FrontRight,
            BackLeft,
            BackRight,
        )
}
